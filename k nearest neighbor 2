

> library(textir) ## needed to standardize the data 
Loading required package: distrom
Loading required package: Matrix
Loading required package: gamlr
Loading required package: parallel
> library(class) ## needed for knn 
> credit <- read.csv("G://DataMining/germancredit.csv")
> credit$history = factor(credit$history, levels=c("A30","A31","A32","A33","A34"))
> levels(credit$history) = c("good","good","poor","poor","terrible")
> credit$foreign <- factor(credit$foreign, levels=c("A201","A202"), labels=c("foreign","german"))
> credit$rent <- factor(credit$housing=="A151")
> credit$purpose <- factor(credit$purpose, levels=c("A40","A41","A42","A43","A44","A45","A46","A47","A48","A49","A410"))
> levels(credit$purpose) <- c("newcar","usedcar",rep("goods/repair",4),"edu",NA,"edu","biz","biz")
> credit <- credit[,c("Default","duration","amount","installment","age", "history", "purpose","foreign","rent")]
> credit[1:3,]
  Default duration amount installment age  history      purpose foreign  rent
1       0        6   1169           4  67 terrible goods/repair foreign FALSE
2       1       48   5951           2  22     poor goods/repair foreign FALSE
3       0       12   2096           2  49 terrible          edu foreign FALSE
> summary(credit)
    Default       duration        amount       installment         age            history            purpose   
 Min.   :0.0   Min.   : 4.0   Min.   :  250   Min.   :1.000   Min.   :19.00   good    : 89   newcar      :234  
 1st Qu.:0.0   1st Qu.:12.0   1st Qu.: 1366   1st Qu.:2.000   1st Qu.:27.00   poor    :618   usedcar     :103  
 Median :0.0   Median :18.0   Median : 2320   Median :3.000   Median :33.00   terrible:293   goods/repair:495  
 Mean   :0.3   Mean   :20.9   Mean   : 3271   Mean   :2.973   Mean   :35.55                  edu         : 59  
 3rd Qu.:1.0   3rd Qu.:24.0   3rd Qu.: 3972   3rd Qu.:4.000   3rd Qu.:42.00                  biz         :109  
 Max.   :1.0   Max.   :72.0   Max.   :18424   Max.   :4.000   Max.   :75.00                                    
    foreign       rent    
 foreign:963   FALSE:821  
 german : 37   TRUE :179  
                          
                          
                          
                          
> ## x <- normalize(credit[,c(2,3,4)])
> x=credit[,c(2,3,4)]
> x[,1]=(x[,1]-mean(x[,1]))/sd(x[,1])
> x[,2]=(x[,2]-mean(x[,2]))/sd(x[,2])
> x[,3]=(x[,3]-mean(x[,3]))/sd(x[,3])
> x[1:3,]
    duration     amount installment
1 -1.2358595 -0.7447588   0.9180178
2  2.2470700  0.9493418  -0.8697481
3 -0.7382981 -0.4163541  -0.8697481
> set.seed(1)
> train <- sample(1:1000,900) ## this is training set of 900 borrowers
> xtrain <- x[train,]
> xnew <- x[-train,]
> ytrain <- credit$Default[train]
> ynew <- credit$Default[-train]
> ## k-nearest neighbor method
> library(class)
> nearest1 <- knn(train=xtrain, test=xnew, cl=ytrain, k=1)
> nearest3 <- knn(train=xtrain, test=xnew, cl=ytrain, k=3)
> data.frame(ynew,nearest1,nearest3)[1:10,]
   ynew nearest1 nearest3
1     1        1        0
2     0        1        1
3     1        1        1
4     0        0        0
5     0        1        1
6     0        0        0
7     0        0        0
8     0        0        0
9     0        1        1
10    0        0        1
> ## calculate the proportion of correct classifications
> pcorrn1=100*sum(ynew==nearest1)/100
> pcorrn3=100*sum(ynew==nearest3)/100
> pcorrn1
[1] 60
> pcorrn3
[1] 61
> ## plot for 3nn
> plot(xtrain[,c("amount","duration")],col=c(4,3,6,2)[credit[train,"installment"]],pch=c(1,2)[as.numeric(ytrain)],main="Predicted default, by 3 nearest neighbors",cex.main=.95)
> points(xnew[,c("amount","duration")],bg=c(4,3,6,2)[credit[train,"installment"]],pch=c(21,24)[as.numeric(nearest3)],cex=1.2,col=grey(.7))
> legend("bottomright",pch=c(1,16,2,17),bg=c(1,1,1,1),legend=c("data 0","pred 0","data 1","pred 1"),title="default",bty="n",cex=.8)
> legend("topleft",fill=c(4,3,6,2),legend=c(1,2,3,4),title="installment %",horiz=TRUE,bty="n",col=grey(.7),cex=.8)
> ## above was for just one training set
> ## cross-validation (leave one out)
> pcorr=dim(10)
> for (k in 1:10) {
+ pred=knn.cv(x,cl=credit$Default,k)
+ pcorr[k]=100*sum(credit$Default==pred)/1000
+ }
> pcorr
 [1] 61.0 61.1 64.2 62.6 64.4 65.9 65.6 67.6 66.0 67.0
> save.image("C:\\Documents and Settings\\farzad\\Desktop\\k nearest neighbor 1")
> 
